#!/usr/bin/env perl
use strict;
use warnings;
use JSON;
use LWP::Simple qw/get/;
use Config::INI::Reader;
use Getopt::Long qw/GetOptions/;
use URI::Escape qw/uri_escape/;
use Data::Dumper;
use ExtUtils::MakeMaker qw/prompt/;

our $VERSION = '0.09';

use constant DEBUG        => $ENV{PERL_GH_DEBUG}        || 0;
use constant WRAP         => $ENV{PERL_GH_WRAP}         || 0;
use constant SCREEN_WIDTH => $ENV{PERL_GH_SCREEN_WIDTH} || 92;

$LWP::Simple::ua->agent("gh/VERSION $VERSION");

$|++;
binmode STDOUT => ':utf8';
binmode STDERR => ':utf8';

GetOptions(
    'h|help!'   => \my $help,
    'V|version' => \my $version,
) or help();
help()    if $help;
version() if $version;

local $SIG{INT} = sub { exit };

action(@ARGV);
exit;

sub _debug {
    print STDERR @_, "\n" if DEBUG;
}

sub _info {
    print STDERR @_, "\n";
}

sub print_list {
    my @lines = @_;
    my $column_w = 0;

    map { 
        $column_w = length($_->[0]) if length($_->[0]) > $column_w ; 
    } @lines;

    for my $arg ( @lines ) {
        my $title = shift @$arg;

        my $padding = int($column_w) - length( $title );

        if ( WRAP && ( $column_w + 3 + length( join " ",@$arg) ) > SCREEN_WIDTH ) {
            # wrap description
            my $string = $title . " " x $padding . " - " . join(" ",@$arg) . "\n";
            $string =~ s/\n//g;

            my $cnt = 0;
            my $firstline = 1;
            my $tab = 4;
            my $wrapped = 0;
            while( $string =~ /(.)/g && ++$cnt ) {
                my $c = $1;
                print $c;

                if( $c =~ /[ \,]/ && $firstline && $cnt > SCREEN_WIDTH ) {
                    print "\n" . " " x ($column_w + 3 + $tab );
                    $firstline = 0;
                    $cnt = 0;
                    $wrapped = 1;
                }
                elsif( $c =~ /[ \,]/ && ! $firstline && $cnt > (SCREEN_WIDTH - $column_w) ) {
                    print "\n" . " " x ($column_w + 3 + $tab );
                    $cnt = 0;
                    $wrapped = 1;
                }
            }
            print "\n";
            print "\n" if $wrapped;
        }
        else { print $title;
            print " " x $padding;
            print " - ";
            print join " " , @$arg;
            print "\n";
        }

    }
}

sub action {
    my $act = shift;

    help() if !$act || $act eq 'help';

    my $method = main->can($act) || _info("Unkown action: $act") && usage();
    $method->(@_);
}

sub search {
    my $keyword = shift || usage(qw/search keyword/);
    my $json = get 'http://github.com/api/v2/json/repos/search/' . uri_escape $keyword;
    my $result = decode_json $json;

    my @list;
    for my $repo (@{$result->{repositories}}) {
        my $name = sprintf '%s/%s', $repo->{username}, $repo->{name};
        my $desc = $repo->{description};
        push @list, [ $name, $desc ];
    }

    print_list @list;
}
sub s { search @_ }

sub clone {
    my ($user, $repo) = _parse_user(shift);
    $repo ||= shift;
    usage(qw/clone user [repo] [attr]/) unless $user && $repo;

    my $attr = shift || 'ro';
    my $uri  = _uri($attr, $user, $repo);
    _info "Fetching $uri ...";
    system qw/git clone/, $uri;
}
sub c {  clone @_ }

sub pull {
    my $acc    = shift || usage(qw/pull account [branch]/);
    my $branch = shift || 'master';

    die 'git config not found.' unless -e '.git/config';
    my $config = parse_config('.git/config');

    for my $remote (values %{$config->{remote}}) {
        my ($my, $repo) = _parse_remote_uri($remote->{url}); 
        if ($my && $repo) {
            my $uri = sprintf 'git://github.com/%s/%s.git', $acc, $repo;
            qx(git pull $uri $branch);
            last;
        }
    }
}
sub pullfork { pull @_ }
sub pf       { pull @_ }

sub list {
    my $acc = shift || usage(qw/list account/);
    my $josn = get 'http://github.com/api/v2/json/repos/show/' . uri_escape $acc;
    my $data = decode_json $josn;

    my @lines;
    for my $repo (@{$data->{repositories}}) {
        push @lines, [
            $acc . '/' . $repo->{name},
            ($repo->{description} || ''),
        ];
    }
    
    print_list @lines;
}

sub cloneall {
    my $acc  = shift || usage(qw/cloneall account [attr]/); 
    my $attr = shift || 'ro';

    _info "Getting repository list from github: $acc";
    my $json = get 'http://github.com/api/v2/json/repos/show/' . uri_escape $acc;
    my $data = decode_json $json ;

    _info "Will clone repositories below:";
    for my $repo ( @{ $data->{repositories} } ) {
        print "  " . $repo->{name} . "\n";
    }

    for my $repo ( @{ $data->{repositories} } ) {
        my $repo_name = $repo->{name};
        (my $local_repo_name = $repo_name) =~ s/\.git$//;

        my $uri = _uri($attr, $acc, $repo_name);
        _info "Fetching $uri";

        if( -e $local_repo_name ) {
            print "==> Updating " . $local_repo_name . " ...\n";
            qx{ cd $local_repo_name ; git pull origin master };
        }
        else {
            print "==> Cloning " . $repo->{name} . " ...\n";
            qx{ git clone -q $uri };
        }
    }
}
sub ca { cloneall @_ }

sub network {
    die 'Git config not found,' unless -e '.git/config';
    my $branch = shift || 'master';

    my $config = parse_config('.git/config');
    for my $remote (values %{$config->{remote}}) {
        my ($acc, $repo) = _parse_remote_uri($remote->{url}); 
        if ($acc && $repo) {
            ($acc, $repo) = (uri_escape($acc), uri_escape($repo));
            my $json = get "http://github.com/api/v2/json/repos/show/$acc/$repo/network";
            my $data = decode_json $json;
            my $networks = $data->{network};

            for my $net (@$networks) {
                _info sprintf '%17s - watchers(%d) forks(%d)',
                    , $net->{owner}.'/'.$net->{name}
                    , $net->{watchers}
                    , $net->{forks}
            }
            last;
        }
    }
}

sub fork {
    my @option = qw/fork [user] [repo]/;
    my ($user, $repo) = _parse_user(shift);
    $repo ||= shift;

    my $auth = parse_config("$ENV{HOME}/.gitconfig")->{github};

    unless ($auth->{user} && $auth->{token}) {
        die << 'MESSAGE';
Github authtoken not found. Can not fork repository.
Try
    $ git config --global github.user username
    $ git config --global github.token token

SEE ALSO `http://help.github.com/git-email-settings/`
MESSAGE
    }

    unless ($repo) {
        usage(@option) unless -e '.git/config';
        my $config = parse_config('.git/config');
        for my $remote (values %{$config->{remote}}) {
            ($user, $repo) = _parse_remote_uri($remote->{url});

            _info "Found GitHub repository of $user/$repo";

            my $remote_url = sprintf 'git@github.com:%s/%s.git', $auth->{user}, $repo;
            _info "Adding remote '$auth->{user}' => $remote_url";

            qx(git remote add $auth->{user} $remote_url);
            _info "Remote added.";
        }
    }

    _info 'repository not found' and usage(@option) unless $user && $repo;

    my $schema = 'https';
    eval { require Net::HTTPS };
    if ($@) {
        _info 'WARNING: THIS LWP IS NOT SUPPORTED HTTPS !!';
        unless (lc(prompt("Are you sure to using `http` schema?", 'n')) eq 'y') {
            die "SEE ALSO: <http://search.cpan.org/dist/libwww-perl/README.SSL>\n";
        }
        $schema = 'http';
    }
    my $uri = sprintf '%s://github.com/api/v2/json/repos/fork/%s/%s', $schema, $user, $repo;

    _info "Forking...";

    my $res = $LWP::Simple::ua->post($uri, +{ login => $auth->{user}, token => $auth->{token} });
    die $res->status_line unless $res->is_success;

    my $json = $res->content;
    my $data = decode_json $json;

    warn Dumper $data if DEBUG;

    _info 'Repository fored:';

    $data = $data->{repository};
    print "  Name:          " . $data->{name} . "\n";
    print "  Description:   " . $data->{description} . "\n";
    print "  Owner:         " . $data->{owner} . "\n";
    print "  Watchers:      " . $data->{watchers} . "\n";
    print "  Created at:    " . $data->{created_at} . "\n";
    print "  Pushed at:     " . $data->{pushed_at} . "\n";
    print "  Fork:          " . $data->{'fork'} . "\n";
    print "  URL:           " . $data->{url} . "\n";
    print "  Homepage:      " . ($data->{homepage}||'') . "\n";
}

sub _parse_user {
    my $user = shift;
    my $repo;

    if ($user && $user =~ m{/}) {
        ($user, $repo) = split '/', $user;
    }

    return $user, $repo;
}

sub _parse_remote_uri {
    my $uri = shift;
    my ($acc, $repo);
    
    if ($uri =~ m{/([^/]+)/([^/]+)\.git}) {
        ($acc, $repo) = ($1, $2);
    }

    return $acc, $repo;
}

sub _uri {
    my ($attr, $user, $repo) = @_;

    my $format;
    if ($attr eq 'ro') {
        $format = 'git://github.com/%s/%s.git';
    }
    elsif ($attr eq 'ssh') {
        $format = 'git@github.com:%s/%s.git';
    }
    elsif ($attr eq 'http') {
        $format = 'http://github.com/%s/%s.git';
    }
    elsif ($attr eq 'https') {
        $format = 'https://%s@github.com/%1$s/%s.git';
    }
    else {
        die "Unkown attr: $attr";
    }

    return sprintf $format, $user, $repo;
}

sub parse_config {
    my $config = Config::INI::Reader->read_file(@_);
    for my $key (keys %$config) {
        my ($new_key, $nested_key) = $key =~ /^(\w+) ['"](\w+)['"]/;
        next unless $new_key && $nested_key;
        $config->{$new_key} ||= {};
        $config->{$new_key}{$nested_key} = delete $config->{$key};
    }
    warn Dumper $config if DEBUG;
    return $config;
}

sub usage {
    my @args = @_;
    @args = qw/[option] action [args]/ unless @args;
    my $option = join ' ', @args;

    print << "USAGE";
Usage: gh $option

Try `gh --help` for more option.
USAGE
    exit;
}

sub version {
    print "gh (App::gh) version $VERSION\n";
    exit;
}

sub help {
    print <<'HELP';
Usage: gh [option] action [args]

Options:
    -h, --help    show this help message
    -V,--version  displays software version

show help message:

    $ gh help

* list:

    list all repository of c9s:

        $ gh list c9s

    if you want text wrapped:

        $ PERL_GH_WRAP=1 gh list c9s

* clone:

    clone Plack repository from miyagawa:

        $ gh clone miyagawa/Plack   # default: read-only 

    or:

        $ gh clone miyagawa Plack

        $ gh clone gugod Social http

        $ gh clone clkao Web-Hippie ro

    clone from read-only uri:

        $ gh clone miyagawa/Plack ro 

    clone from ssh uri:

        $ gh clone miyagawa/Plack ssh  

* search:

    search repository:

        $ gh search Plack

* cloneall:

    to clone all repository of miyagawa:

        $ gh cloneall miyagawa 

        $ gh cloneall clkao ro  # read-only

* fork;

    to fork project:

        $ gh fork clkao AnyMQ

    to fork current project:
        
        $ cd clkao/AnyMQ
        $ gh fork

* network:

    to show fork network:

        $ cd App-gh/
        $ gh network
            c9s/App-gh - watchers(4) forks(1)
          gugod/App-gh - watchers(1) forks(0)

* pull from other's fork:

    pull from gugod/project.git branch master (default):

        $ cd project
        $ gh pull gugod           

    pull from gugod/project.git branch feature:

        $ cd project
        $ gh pull gugod feature    

HELP
    exit;
}

__END__
